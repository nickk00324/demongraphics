{"version":3,"sources":["components/Navigation/Navigation.js","components/Logo/Logo.js","components/ImageInputForm/ImageInputForm.js","components/SignIn/Signin.js","components/Register/Register.js","components/Rank/Rank.js","components/PersonRecognition/PersonRecognition.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","onRouteChange","isSignedIn","logOut","className","onClick","Logo","options","max","style","height","width","alt","src","ImageInputForm","onInputChange","onSubmit","type","onChange","SignIn","host","useState","signInEmail","setSignInEmail","signInPassword","setSignInPassword","htmlFor","id","event","target","value","fetch","method","headers","body","JSON","stringify","email","password","then","response","json","data","console","log","Register","loadUser","userEmail","setUserEmail","userPassword","setUserPassword","userName","setUserName","name","user","Rank","person","age","ethnicity","gender","PersonRecognition","url","length","App","route","setRoute","input","setInput","setURL","setSignIn","setPerson","entries","joined","setUser","filterHighestProbability","probArray","highest","forEach","prob","params","particleParams","ehtnicity","newPerson","personData","ageData","age_appearance","concepts","ethnicityData","multicultural_appearance","genderData","gender_appearance","formatPerson","userEntries","Object","assign","err","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be9f8c8b.chunk.js","sourcesContent":["import React from 'react';\nimport './Navigation.css';\n\nconst Navigation = ( { onRouteChange, isSignedIn, logOut }) => {\n   \n    return(\n        isSignedIn ? \n        <nav>\n            <p className=\"link\" onClick={logOut}>\n                Sign Out\n            </p>\n        </nav> \n        :\n        <nav>\n            <p className=\"link\" onClick={() => onRouteChange('signIn')}>Sign In</p>\n            <p className=\"link\" onClick={() => onRouteChange('register')}>Register</p>\n        </nav> \n    )\n    \n\n        \n}\n\nexport default Navigation;","import React, { Fragment } from 'react';\nimport Tilt from 'react-tilt';\nimport \"./Logo.css\";\n\nconst Logo = () => {\n    return(\n        <Fragment>\n            <div className=\"logo\">\n                <Tilt className=\"Tilt\" options={{ max: 25 }} style={{ height: 150, width: 250 }} >\n                    <div className=\"Tilt-inner\">\n                        <img alt=\"cool logo\" src=\"https://library.kissclipart.com/20180829/vew/kissclipart-generic-logo-png-clipart-logo-brand-organization-be5c1b13e9a7c0b3.jpg\"\n                            style={{ width: \"250px\" }} />\n                    </div>\n                </Tilt>\n            </div>\n            \n        </Fragment>\n    )\n}\n\nexport default Logo;","import React from 'react';\nimport \"./ImageInputForm.css\";\n\nconst ImageInputForm = ({onInputChange, onSubmit}) => {\n    return(\n        <div className=\"center\">\n            <input type=\"text\" onChange={onInputChange}/>\n            <button className=\"submit\" onClick={onSubmit}> Do it</button>\n        </div>\n    );\n}\n\nexport default ImageInputForm;","import React, { Fragment, useState } from 'react';\nimport './SignIn.css'\n\nconst SignIn = ( {onRouteChange, host }) => {\n    const [signInEmail, setSignInEmail] = useState(\"\");\n    const [signInPassword, setSignInPassword] = useState(\"\");\n\n    const onEmailChange = event => {\n        setSignInEmail(event.target.value);\n    }\n\n    const onPasswordChange = event => {\n        setSignInPassword(event.target.value);\n    }\n\n    const sendCredentials = () => {\n        fetch(`${host}/login`, {\n            method: 'post',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                email: signInEmail,\n                password: signInPassword\n            })\n        })\n        .then(response=> response.json())\n        .then(data => {\n            if(data === 'success'){\n                onRouteChange('home');\n            } else {\n                console.log(\"NO\");\n            }\n        }) \n        \n    }\n    return(\n        <Fragment>\n            <div className=\"sign-in-form\">\n                <h2>Sign In</h2>\n                <label htmlFor=\"email\">Email</label>  \n                <input id=\"email\" type=\"email\" onChange={onEmailChange}/>\n                <label htmlFor=\"password\">Password</label>\n                <input id=\"password\" type=\"password\" onChange={onPasswordChange}/>\n                <button className=\"submit\" onClick={sendCredentials} >Sign In</button>\n                <p className=\"smaller-link\" onClick={ () => onRouteChange('register')}>\n                    Register\n                </p>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default SignIn;","import React, { Fragment, useState } from 'react';\nimport '../SignIn/SignIn.css'\n\nconst Register = ({ onRouteChange, loadUser, host }) => {\n    const [userEmail, setUserEmail] = useState(\"\");\n    const [userPassword, setUserPassword] = useState(\"\");\n    const [userName, setUserName] = useState(\"\");\n\n    const onEmailChange = event => {\n        setUserEmail(event.target.value);\n    }\n\n    const onPasswordChange = event => {\n        setUserPassword(event.target.value);\n    }\n\n    const onNameChange = event => {\n        setUserName(event.target.value);\n    }\n\n    const sendCredentials = () => {\n        fetch(`${host}/register`, {\n            method: 'post',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                name: userName,\n                email: userEmail,\n                password: userPassword\n            })\n        })\n        .then(response=> response.json())\n        .then( user => {\n            if(user){\n                loadUser(user);\n                onRouteChange('home');\n            }\n        });\n    }\n    return (\n        <Fragment>\n            <div className=\"sign-in-form\">\n                <h2>Register</h2>\n                <label htmlFor=\"name\">Name</label>\n                <input onChange={onNameChange} type=\"text\" id=\"name\"/>\n                <label htmlFor=\"email\">Email</label>\n                <input onChange={onEmailChange} id=\"email\" type=\"email\" />\n                <label htmlFor=\"password\">Password</label>\n                <input onChange={onPasswordChange} id=\"password\" type=\"password\" />\n                <button className=\"submit\" onClick={sendCredentials}>Register</button>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default Register;","import React, { Fragment } from 'react';\nimport './Rank.css';\n\nconst Rank = ({ person }) => {\n    return(\n        <Fragment>\n            {person.age !== \"-1\" ? \n                <header className=\"center\">\n                    <p className=\"main-header\">\n                        {\"according to the robot this is: \"}\n                    </p>\n                    <p className=\"rank\">\n                        {`a ${person.age} year old ${person.ethnicity} ${person.gender}`}\n                    </p>\n                    <p className=\"subtitle\">\n                        {\"(probably, based on probabilities based on the robot's inputs)\"}\n                    </p>\n                </header> : \n                <header className=\"center\">\n                    <p className=\"subtitle\">\n                        {\"enter a photo url to find out what the robot thinks\"}\n                    </p>\n                </header>\n                \n            }\n            \n        </Fragment>\n        \n    );\n}\n\nexport default Rank;","import React, { Fragment } from 'react';\nimport \"./PersonRecognition.css\";\n\nconst PersonRecognition = ( { url } ) => {\n    return(\n            <Fragment>\n                { url.length? <img src={url}\n                    alt=\"pretty fucking cool\" \n                    className=\"center image\"\n                     /> : <div></div> }\n            </Fragment>\n    );\n}\n\nexport default PersonRecognition;","import React, { Fragment, useState } from 'react';\nimport Particles from 'react-particles-js';\nimport particleParams from './particlesjs-config.json';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from \"./components/Logo/Logo\";\nimport ImageInputForm from \"./components/ImageInputForm/ImageInputForm\";\nimport SignIn from \"./components/SignIn/Signin\";\nimport Register from \"./components/Register/Register\";\nimport Rank from './components/Rank/Rank';\nimport './App.css';\nimport PersonRecognition from './components/PersonRecognition/PersonRecognition.js';\n\n//localhost for testing, server url for production\nconst host = 'https://lit-savannah-11730.herokuapp.com';\n//const serverURL = 'https://lit-savannah-11730.herokuapp.com/'\n\nconst App = () => {\n  const [route, setRoute] = useState(\"signIn\")\n  const [input, setInput] = useState(\"\");\n  const [url, setURL] = useState(\"\");\n  const [isSignedIn, setSignIn] = useState(false);\n  const [person, setPerson] = useState({\n    age: \"-1\",\n    ethnicity: \"\",\n    gender: \"\"\n  });\n  const [user, setUser] = useState({\n    id: \"\",\n    name: \"\",\n    email: \"\",\n    entries: 0,\n    joined: \"\"\n  });\n\n  const logOut = () => {\n    setUser({\n      id: \"\",\n      name: \"\",\n      email: \"\",\n      entries: 0,\n      joined: \"\"\n    });\n    setURL(\"\");\n    setPerson({\n      age: \"-1\",\n      ehtnicity: \"\",\n      gender: \"\"\n    });\n    onRouteChange('signIn');\n  }\n\n  const onInputChange = event => {\n    setInput(event.target.value);\n  }\n\n  const loadUser = user => {\n    setUser({\n      id: user.id,\n      name: user.name,\n      email: user.email,\n      entries: user.entries,\n      joined: user.joined\n    });\n  }\n\n  const formatPerson = personData => {\n    const ageData = filterHighestProbability(personData.age_appearance.concepts);\n    const ethnicityData = filterHighestProbability(personData.multicultural_appearance.concepts);\n    const genderData = filterHighestProbability(personData.gender_appearance.concepts);\n    genderData.name = genderData.name === \"masculine\" ? \"man\" : \"woman\";\n    return { age: ageData.name, ethnicity: ethnicityData.name, gender: genderData.name};\n  }\n\n  const filterHighestProbability = probArray => {\n    let highest = { value: 0};\n    probArray.forEach( prob => {\n      highest = prob.value > highest.value ? prob : highest;\n    });\n    return highest;\n  }\n\n  const onSubmit = () => {\n    setURL(input);\n    fetch(`${host}/imageURL`, {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        input: input\n      })\n    })\n    .then(response => response.json())\n    .then(data => {\n      const newPerson = formatPerson(data);\n      setPerson(newPerson);\n    }) \n    .then(\n      function (response) {\n        if(response) {\n          fetch(`${host}/image`, {\n            method: 'put',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: user.id\n            })\n          })\n          .then( response => response.json())\n          .then(data => {\n            console.log(data);\n          })\n          .then ( userEntries => Object.assign(user, {entries: userEntries}))\n        }\n          // const newPerson = formatPerson(response);\n          // setPerson(newPerson);\n      },\n      function (err) {\n        console.log(err);\n      }\n    );\n  }\n\n  const onRouteChange = route => {\n    if(route === \"home\"){\n      setSignIn(true);\n    } else{\n      setSignIn(false);\n    }\n    setRoute(route);\n  }\n\n\n  return(\n    <Fragment>\n      <Particles className=\"particles\" params={particleParams}/>\n      <Navigation logOut={logOut} isSignedIn={isSignedIn} onRouteChange={onRouteChange} route={route}/>\n      { route === 'home' ? \n        <Fragment>\n          <Logo />\n          <Rank person={person} />\n          <ImageInputForm onInputChange={onInputChange} onSubmit={onSubmit} />\n          <PersonRecognition url={url} />\n        </Fragment>\n        : (\n          route === 'signIn' ? \n            <Fragment>\n              <SignIn host={host} onRouteChange={onRouteChange} />\n            </Fragment>\n            :\n            <Fragment>\n              <Register host={host} loadUser={loadUser} onRouteChange={onRouteChange} />\n            </Fragment>\n          )   \n      }\n    </Fragment>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}